// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                     String    @id @default(uuid()) @db.Uuid
  email                  String    @unique @db.VarChar(255)
  name                   String?   @db.VarChar(50)
  passwordHash           String    @db.VarChar(255)
  createdAt              DateTime  @default(now())
  updatedAt              DateTime  @updatedAt
  isActive               Boolean   @default(true)
  roles                  Role[]    @relation("users_roles")
  passwordResetToken     String?   @db.VarChar(255)
  passwordResetExpires   DateTime? @db.Timestamp(6)
  isEmailVerified        Boolean   @default(false)
  emailVerificationToken String?   @db.VarChar(255)
  failedLoginAttempts    Int       @default(0)
  lockoutUntil           DateTime?
  Session                Session[]

  @@index([email])
  @@index([name])
  @@index([isActive])
  @@index([isEmailVerified])
}

model Role {
  id          String  @id @default(uuid()) @db.Uuid
  name        String  @unique @db.VarChar(50)
  description String? @db.VarChar(255)
  users       User[]  @relation("users_roles")
}

model Session {
  id               String   @id @default(uuid()) @db.Uuid
  user             User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId           String   @db.Uuid
  refreshTokenHash String   @db.VarChar(255)
  expiresAt        DateTime @db.Timestamp(6)
  createdAt        DateTime @default(now())
  ipAddress        String   @db.VarChar(255)
  userAgent        String?  @db.VarChar(255)
}
